package window;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.traversal.DocumentTraversal;
import org.w3c.dom.traversal.NodeFilter;
import org.w3c.dom.traversal.TreeWalker;
import org.xml.sax.SAXException;

public class ValidationFrame extends javax.swing.JFrame {

    public static class MandatoryException extends Exception {

        public MandatoryException(String message) {
            super(message);
        }
    }

    /**
     * Creates new form ValidationFrame
     */
    public ValidationFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("/images/tricise_logo.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mandatory = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        analyzeCodeBtn = new javax.swing.JButton();
        mandatoryNo = new javax.swing.JRadioButton();
        mandatoryYes = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        prefix = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        findXML = new javax.swing.JButton();
        route = new javax.swing.JTextField();
        resultSummary = new javax.swing.JLabel("<html>The process code is <span style='color: green;'>correct</span>. | The process code is <span style='color: red;'>incorrect</span>. | The process code <span style='color: orange;'>may contain errors</span>.</html>")
        ;
        jScrollPane1 = new javax.swing.JScrollPane();
        validationResult = new javax.swing.JTextPane();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tricise - Process code validator");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Validation result:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Validation result summary:");

        analyzeCodeBtn.setBackground(new java.awt.Color(204, 204, 204));
        analyzeCodeBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        analyzeCodeBtn.setForeground(new java.awt.Color(255, 255, 255));
        analyzeCodeBtn.setText("Analyze Code");
        analyzeCodeBtn.setEnabled(false);
        analyzeCodeBtn.setFocusable(false);
        analyzeCodeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeCodeBtnActionPerformed(evt);
            }
        });

        mandatory.add(mandatoryNo);
        mandatoryNo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mandatoryNo.setText("<html>\n<b>No</b>\n</html>");
        mandatoryNo.setActionCommand("No");

        mandatory.add(mandatoryYes);
        mandatoryYes.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mandatoryYes.setSelected(true);
        mandatoryYes.setText("<html> <b>Yes</b> </html>");
        mandatoryYes.setActionCommand("Yes");
        mandatoryYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mandatoryYesActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Process file (XML):");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Mandatory name department identification?");

        prefix.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        prefix.setForeground(new java.awt.Color(153, 153, 153));
        prefix.setText("Example: c_");
        prefix.setToolTipText("");
        prefix.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                prefixFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                prefixFocusLost(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Insert prefix client/department:");

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Tricise-Process code validator");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jLabel1.setName(""); // NOI18N
        jLabel1.setOpaque(true);

        findXML.setBackground(new java.awt.Color(204, 204, 204));
        findXML.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Carpeta_prueba.png"))); // NOI18N
        findXML.setBorder(null);
        findXML.setBorderPainted(false);
        findXML.setContentAreaFilled(false);
        findXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findXMLActionPerformed(evt);
            }
        });

        route.setEditable(false);
        route.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        route.setForeground(new java.awt.Color(153, 153, 153));
        route.setText("Load XML file (max. 5 MB)...");
        route.setFocusable(false);
        route.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routeActionPerformed(evt);
            }
        });
        route.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                routeKeyReleased(evt);
            }
        });

        resultSummary.setBackground(new java.awt.Color(255, 255, 255));
        resultSummary.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        resultSummary.setForeground(new java.awt.Color(153, 153, 153));
        resultSummary.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        resultSummary.setOpaque(true);

        validationResult.setEditable(false);
        validationResult.setContentType("text/html"); // NOI18N
        validationResult.setFocusable(false);
        jScrollPane1.setViewportView(validationResult);

        progressBar.setForeground(new java.awt.Color(51, 204, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prefix, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(mandatoryYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mandatoryNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(route, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findXML, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(analyzeCodeBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultSummary, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(prefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mandatoryYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mandatoryNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(findXML, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(route, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(analyzeCodeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 598, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel2, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void routeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_routeKeyReleased

    }//GEN-LAST:event_routeKeyReleased

    private void routeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_routeActionPerformed

    private static File xmlFile;

    // Opens a file chooser to select an XML file and loads its content
    private void findXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findXMLActionPerformed
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML files", "xml");
        fc.setFileFilter(filter);

        int res = fc.showOpenDialog(this);
        if (res != JFileChooser.CANCEL_OPTION) {
            File name = fc.getSelectedFile();
            if ((name == null) || name.getName().equals("")) {
                JOptionPane.showMessageDialog(this, "Error opening the file");
                disableAnalyzeBtn();
            } else {
                // Ensure file size is below the 5 MB limit
                if (name.length() > 5 * 1024 * 1024) {
                    JOptionPane.showMessageDialog(this, "The selected file exceeds the maximum size of 5 MB.");
                    disableAnalyzeBtn();
                    return;
                }
                route.setText(name.getAbsolutePath());
            }
        }

        loadXML();
    }//GEN-LAST:event_findXMLActionPerformed

    private void loadXML() {
        String fileRoute = route.getText();
        xmlFile = new File(fileRoute);

        try {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbf.newDocumentBuilder();
            doc = dBuilder.parse(xmlFile);
            doc.getDocumentElement().normalize();
            enableAnalyzeBtn();
        } catch (IOException | ParserConfigurationException | SAXException e) {
            JOptionPane.showMessageDialog(null, "An error ocurred: " + e.getMessage());
            disableAnalyzeBtn();
        }
    }

    // Sets a default text when the 'prefix' field loses focus if it's empty
    private void prefixFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_prefixFocusLost
        if (prefix.getText().equals("")) {
            prefix.setText("Example: c_");
            prefix.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_prefixFocusLost

    // Clears the default text in the 'prefix' field when it gains focus
    private void prefixFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_prefixFocusGained
        if (prefix.getText().equals("Example: c_")) {
            prefix.setText("");
            prefix.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_prefixFocusGained

    private void mandatoryYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mandatoryYesActionPerformed
    }//GEN-LAST:event_mandatoryYesActionPerformed

    // Validates the code and disables all interactive components
    private void analyzeCodeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeCodeBtnActionPerformed
        restart();
        loadXML();

        validationResult.setText("<html><head><style>"
                + "body {"
                + "font-family: \"Segoe UI\", Arial, sans-serif;"
                + "font-style: normal;"
                + "font-weight: 400;"
                + "}"
                + "</style></head><body>" + checks() + "</body></html>");

        disableAll();
    }//GEN-LAST:event_analyzeCodeBtnActionPerformed

    // Enables or disables the 'Analyze' button based on whether the XML file is loaded
    public void enableAnalyzeBtn() {
        if (route.getText().trim().equals("Load XML file (max. 5 MB)...")) {
            analyzeCodeBtn.setBackground(new Color(153, 153, 153));
            analyzeCodeBtn.setEnabled(false);
        } else {
            analyzeCodeBtn.setBackground(Color.red);
            analyzeCodeBtn.setEnabled(true);
        }
    }

    public void disableAnalyzeBtn() {
        analyzeCodeBtn.setBackground(new Color(204, 204, 204));
        analyzeCodeBtn.setForeground(new Color(255, 255, 255));
        analyzeCodeBtn.setEnabled(false);
        restart();
    }

    public void restart() {
        errors.delete(0, errors.length());
        validationResult.setText("");
        progressBar.setValue(0);
        resultSummary.setText("<html>The process code is <span style='color: green;'>correct</span>. | The process code is <span style='color: red;'>incorrect</span>. | The process code <span style='color: orange;'>may contain errors</span>.</html>");
    }

    // Returns a list of line numbers where the specified XML tag is found
    public static List<Integer> getLineNumber(String tag) {
        List<Integer> lineNumbers = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(xmlFile))) {
            String line;
            int lineNumber = 0;

            while ((line = reader.readLine()) != null) {
                lineNumber++;

                if (line.contains(tag)) {
                    lineNumbers.add(lineNumber);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return lineNumbers;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ValidationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ValidationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ValidationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ValidationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ValidationFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeCodeBtn;
    private javax.swing.JButton findXML;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup mandatory;
    private javax.swing.JRadioButton mandatoryNo;
    private javax.swing.JRadioButton mandatoryYes;
    private javax.swing.JTextField prefix;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel resultSummary;
    private javax.swing.JTextField route;
    private javax.swing.JTextPane validationResult;
    // End of variables declaration//GEN-END:variables

    public static Document doc;

    public static StringBuilder errors = new StringBuilder();

    // Validates that there is exactly one "Process" element in the XML document
    private org.w3c.dom.Element validateSingleProcess() {
        NodeList processes = doc.getElementsByTagName("Process");
        if (processes.getLength() != 1) {
            errors.append("- <strong><font color='red'>ERROR</font></strong>");
            errors.append(": There is more than one process in the script<br>");
            return null;
        } else {
            return (org.w3c.dom.Element) processes.item(0);
        }

    }

    // Validates that process and its steps/actions use the specified prefix
    private void validatePrefix(org.w3c.dom.Element process) {
        if (!prefix.getText().trim().equals("Example: c_")) {
            NodeList steps = process.getElementsByTagName("Step");
            NodeList actions = process.getElementsByTagName("Action");
            String prefixUser = prefix.getText();

            if (!process.getAttribute("code").startsWith(prefixUser)) {
                errors.append("- <strong><font color='red'>ERROR</font></strong>");
                errors.append(": The process '").append(process.getAttribute("code")).append("' does not have the prefix '").append(prefixUser).append("'<br>");
            }

            for (int i = 0; i < steps.getLength(); i++) {
                org.w3c.dom.Element step = (org.w3c.dom.Element) steps.item(i);
                String stepId = step.getAttribute("id");

                if (!stepId.equals("Start") && !stepId.equals("Finish")) {
                    if (!stepId.startsWith(prefixUser)) {
                        errors.append("- <strong><font color='red'>ERROR</font></strong>");
                        errors.append(": Step '").append(step.getAttribute("id")).append("' does not have the prefix '").append(prefixUser).append("'<br>");
                    }
                }
            }

            for (int i = 0; i < actions.getLength(); i++) {
                org.w3c.dom.Element action = (org.w3c.dom.Element) actions.item(i);

                if (!action.getAttribute("code").startsWith(prefixUser)) {
                    errors.append("- <strong><font color='red'>ERROR</font></strong>");
                    errors.append(": Action '").append(action.getAttribute("code")).append("' does not have the prefix '").append(prefixUser).append("'<br>");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please insert a prefix");
        }
    }

    // Validates that the process, steps and actions has descriptions in all required languages
    private void validateDescriptionLanguages(org.w3c.dom.Element process) {
        if (!compareLanguages(process)) {
            errors.append("- <strong><font color='red'>ERROR</font></strong>");
            errors.append(": The process does not have a description in all languages<br>");
        }

        validateDescriptionInProcess(process);

        NodeList steps = process.getElementsByTagName("Step");

        for (int i = 0; i < steps.getLength(); i++) {
            org.w3c.dom.Element step = (org.w3c.dom.Element) steps.item(i);

            if (!compareLanguages(step)) {
                errors.append("- <strong><font color='red'>ERROR</font></strong>");
                errors.append(": Step '" + step.getAttribute("id") + "' does not have a description in all languages<br>");
            }

            NodeList actions = step.getElementsByTagName("Action");

            for (int j = 0; j < actions.getLength(); j++) {
                org.w3c.dom.Element action = (org.w3c.dom.Element) actions.item(j);

                if (!compareLanguages(action)) {
                    errors.append("- <strong><font color='red'>ERROR</font></strong>");
                    errors.append(": Action '").append(action.getAttribute("code")).append("' in Step '").append(step.getAttribute("id")).append("' does not have a description in all languages<br>");
                }
            }
        }
    }

    // Verifies that the ‘description’ attribute is not empty in the nls directly inside process
    private void validateDescriptionInProcess(org.w3c.dom.Element process) {
        NodeList childNodes = process.getChildNodes();

        for (int i = 0; i < childNodes.getLength(); i++) {
            Node child = childNodes.item(i);

            if (child.getNodeName().equals("nls")) {
                org.w3c.dom.Element nlsElement = (org.w3c.dom.Element) child;
                String description = nlsElement.getAttribute("description").trim();
                if (description.isEmpty()) {
                    String languageCode = nlsElement.getAttribute("languageCode");
                    errors.append("- <strong><font color='red'>ERROR</font></strong>");
                    errors.append(": The description for language '").append(languageCode).append("' is empty<br>");
                }
            }
        }
    }

    // Verifies that all languages are present in the element
    private boolean compareLanguages(org.w3c.dom.Element element) {
        String[] languages = {"ca", "cs", "da", "de", "en", "es", "fi", "fr", "hu", "it", "ja", "ko", "nl", "no",
            "pl", "pt", "ru", "sv", "tr", "zh", "zh_TW"};
        HashSet<String> languagesSet = new HashSet<>(Arrays.asList(languages));
        HashSet<String> foundLanguagesSet = new HashSet<>();

        NodeList childNodes = element.getChildNodes();

        for (int i = 0; i < childNodes.getLength(); i++) {
            Node child = childNodes.item(i);
            if (child.getNodeName().equals("nls")) {
                org.w3c.dom.Element nlsElement = (org.w3c.dom.Element) child;
                String languageCode = nlsElement.getAttribute("languageCode");
                foundLanguagesSet.add(languageCode);
            }
        }

        return foundLanguagesSet.containsAll(languagesSet);
    }

    // Check if the answer to the mandatory question is affirmative 
    private void validateMandatory(org.w3c.dom.Element process) {
        if (mandatory.isSelected(mandatoryYes.getModel())) {
            validateProcessDepartment(process);
        }
    }

    // Validates that the process has a properly formatted department name in its "nls" elements
    private void validateProcessDepartment(org.w3c.dom.Element process) {
        NodeList nlsList = process.getChildNodes();
        boolean hasDepartment = true;

        for (int i = 0; i < nlsList.getLength(); i++) {
            Node node = nlsList.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equals("nls")) {
                org.w3c.dom.Element nlsTag = (org.w3c.dom.Element) node;
                if (!nlsTag.getAttribute("name").matches("^\\([A-Z]+\\)\\s+.*")) {
                    hasDepartment = false;
                }
            }
        }

        if (!hasDepartment) {
            errors.append("- <strong><font color='red'>ERROR</font></strong>");
            errors.append(": The attribute 'name' of the process does not indicate the department concerned<br>");
        }
    }

    // Ensures that each step has both a previous and next step, if applicable
    private void avoidMissedSteps(org.w3c.dom.Element process) {
        HashSet<String> stepIds = new HashSet<>();
        HashMap<String, String> transitionsMap = new HashMap<>();

        NodeList steps = process.getElementsByTagName("Step");

        for (int i = 0; i < steps.getLength(); i++) {
            org.w3c.dom.Element step = (org.w3c.dom.Element) steps.item(i);
            String stepId = step.getAttribute("id");
            stepIds.add(stepId);

            NodeList transitions = step.getElementsByTagName("Transition");
            for (int j = 0; j < transitions.getLength(); j++) {
                org.w3c.dom.Element transition = (org.w3c.dom.Element) transitions.item(j);
                String toStep = transition.getAttribute("to");
                transitionsMap.put(stepId, toStep);
            }
        }

        for (String stepId : stepIds) {
            if (stepId.equals("Start")) {
                if (!transitionsMap.containsKey("Start")) {
                    errors.append("- <strong><font color='red'>ERROR</font></strong>");
                    errors.append(": Step 'Start' is missing a next step<br>");
                }
            } else if (stepId.equals("Finish")) {
                if (transitionsMap.containsKey("Finish")) {
                    errors.append("- <strong><font color='red'>ERROR</font></strong>");
                    errors.append(": Step 'Finish' should not have a next step<br>");
                }
            } else {
                boolean isTargetOfAnyTransition = transitionsMap.containsValue(stepId);
                if (!isTargetOfAnyTransition) {
                    errors.append("- <strong><font color='red'>ERROR</font></strong>");
                    errors.append(": Step '").append(stepId).append("' is missing a previous step<br>");
                }

                if (!transitionsMap.containsKey(stepId)) {
                    errors.append("- <strong><font color='red'>ERROR</font></strong>");
                    errors.append(": Step '").append(stepId).append("' is missing a next step<br>");
                }
            }
        }
    }

    // Validates that the process's variables match the global variables file
    private void validateGlobalVariables(org.w3c.dom.Element process) {
        String variablesPath = "src/document/globalVariables.xml";

        StringBuilder missingVariables = new StringBuilder();

        try {
            File variablesFile = new File(variablesPath);
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbf.newDocumentBuilder();

            Document globalVariables = dBuilder.parse(variablesFile);
            globalVariables.getDocumentElement().normalize();

            if (globalVariables == null) {
                System.out.println("Global variables null");
                return;
            }

            NodeList variablesOriginal = globalVariables.getElementsByTagName("core:set");
            NodeList variablesToCheck = process.getElementsByTagName("core:set");

            for (int i = 0; i < variablesOriginal.getLength(); i++) {
                org.w3c.dom.Element var1 = (org.w3c.dom.Element) variablesOriginal.item(i);
                String nameVar1 = var1.getAttribute("var").trim();
                String valueVar1 = var1.getAttribute("value").trim();

                boolean found = false;
                for (int j = 0; j < variablesToCheck.getLength(); j++) {
                    org.w3c.dom.Element var2 = (org.w3c.dom.Element) variablesToCheck.item(j);
                    String nameVar2 = var2.getAttribute("var").trim();
                    String valueVar2 = var2.getAttribute("value").trim();

                    if (nameVar1.equals(nameVar2)) {
                        if (!valueVar1.equals(valueVar2)) {
                            errors.append("- <strong><font color='red'>ERROR</font></strong>");
                            errors.append(": Value in '").append(nameVar2).append("' is not equal to '").append(valueVar1).append("'<br>");
                        }
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    missingVariables.append("'").append(nameVar1).append("'").append(", ");
                }
            }
            if (missingVariables.length() > 0) {
                missingVariables.setLength(missingVariables.length() - 2);
                errors.append("- <strong><font color='red'>ERROR</font></strong>");
                errors.append(": Variables not found: ").append(missingVariables.toString()).append("<br>");
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    // Validates that the process header and checks for the "Finish" step and its header content
    private void validateProcessHeader(org.w3c.dom.Element process) {
        NodeList steps = process.getElementsByTagName("Step");
        boolean finishStepFound = false;
        boolean gelScriptValid = false;

        for (int i = 0; i < steps.getLength(); i++) {
            org.w3c.dom.Element step = (org.w3c.dom.Element) steps.item(i);
            if (step.getAttribute("id").equals("Finish")) {
                finishStepFound = true;
                NodeList scriptTexts = step.getElementsByTagName("scriptText");

                if (scriptTexts.getLength() > 0) {
                    org.w3c.dom.Element scriptText = (org.w3c.dom.Element) scriptTexts.item(0);
                    NodeList gelScripts = scriptText.getElementsByTagName("gel:script");

                    if (gelScripts.getLength() > 0) {
                        org.w3c.dom.Element gelScript = (org.w3c.dom.Element) gelScripts.item(0);
                        gelScriptValid = checkHeader(gelScript);
                    }
                }
                break;
            }
        }

        if (!finishStepFound) {
            errors.append("- <strong><font color='red'>ERROR</font></strong>");
            errors.append(": Could not validate process header, 'Finish' step not found<br>");
        } else if (!gelScriptValid) {
            errors.append("- <strong><font color='red'>ERROR</font></strong>");
            errors.append(": The process does not contain an appropriate header<br>");
        }
    }

    // Checks if the "gel:script" tags have the correct namespace attributes
    private boolean checkHeader(org.w3c.dom.Element gelScript) {
        return "http://schemas.xmlsoap.org/soap/envelope/".equals(gelScript.getAttribute("xmlns:SOAP-ENV"))
                && "jelly:com.niku.bpm.gel.BPMTagLibrary".equals(gelScript.getAttribute("xmlns:bpm"))
                && "jelly:core".equals(gelScript.getAttribute("xmlns:core"))
                && "jelly:email".equals(gelScript.getAttribute("xmlns:email"))
                && "jelly:com.niku.union.gel.FileTagLibrary".equals(gelScript.getAttribute("xmlns:file"))
                && "jelly:com.niku.union.gel.GELTagLibrary".equals(gelScript.getAttribute("xmlns:gel"))
                && "jelly:com.niku.union.gel.RemedyTagLibrary".equals(gelScript.getAttribute("xmlns:rem"))
                && "urn:HelpDesk_Query_Service".equals(gelScript.getAttribute("xmlns:remedy"))
                && "jelly:com.niku.union.gel.SOAPTagLibrary".equals(gelScript.getAttribute("xmlns:soap"))
                && "http://schemas.xmlsoap.org/soap/encoding/".equals(gelScript.getAttribute("xmlns:soapenc"))
                && "http://schemas.xmlsoap.org/soap/envelope/".equals(gelScript.getAttribute("xmlns:soapenv"))
                && "jelly:sql".equals(gelScript.getAttribute("xmlns:sql"))
                && "jelly:util".equals(gelScript.getAttribute("xmlns:util"))
                && "jelly:org.apache.commons.jelly.tags.xml.XMLTagLibrary".equals(gelScript.getAttribute("xmlns:x"))
                && "http://www.niku.com/xog".equals(gelScript.getAttribute("xmlns:xog"))
                && "http://www.w3.org/2001/XMLSchema".equals(gelScript.getAttribute("xmlns:xsd"))
                && "http://www.w3.org/2001/XMLSchema-instance".equals(gelScript.getAttribute("xmlns:xsi"))
                && "http://www.w3.org/1999/XSL/Transform".equals(gelScript.getAttribute("xmlns:xsl"));
    }

    // Check if scripts have comments
    private void validateComments(org.w3c.dom.Element process) {
        NodeList scripts = process.getElementsByTagName("gel:script");

        for (int i = 0; i < scripts.getLength(); i++) {
            org.w3c.dom.Element script = (org.w3c.dom.Element) scripts.item(i);
            int lineCount = 0, currentBlock = 1, totalLinesCount = 0;
            boolean hasCommentInBlock = false, hasComments = false;

            TreeWalker treeWalker = ((DocumentTraversal) script.getOwnerDocument())
                    .createTreeWalker(
                            script,
                            NodeFilter.SHOW_ALL,
                            null,
                            false
                    );

            Node currentNode = treeWalker.getCurrentNode();
            Node previousNode = null;

            while (currentNode != null) {
                lineCount++;
                totalLinesCount++;

                if (currentNode.getNodeType() == Node.COMMENT_NODE) {
                    hasCommentInBlock = true;
                    hasComments = true;
                }

                if (previousNode != null && previousNode.getNodeType() == Node.TEXT_NODE
                        && currentNode.getNodeType() != Node.TEXT_NODE) {
                    lineCount--;
                    totalLinesCount--;
                }

                if (lineCount >= 100) {
                    if (!hasCommentInBlock) {
                        errors.append("- <strong><font color='red'>ERROR</font></strong>");
                        errors.append(": No comments found in block " + currentBlock + " of 100 lines in script #" + (i + 1) + "<br>");
                    }
                    lineCount = 0;
                    currentBlock++;
                    hasCommentInBlock = false;
                }

                previousNode = currentNode;
                currentNode = treeWalker.nextNode();
            }

            if (totalLinesCount < 100 && !hasComments) {
                errors.append("- <strong><font color='red'>ERROR</font></strong>");
                errors.append(": No comments found in script #" + (i + 1) + "<br>");
            }
        }
    }

    // Checks if the "vg_debug" parameter is present and correctly set
    private void validateVgDebugParameter(org.w3c.dom.Element process) {
        NodeList steps = process.getElementsByTagName("Step");

        for (int i = 0; i < steps.getLength(); i++) {
            org.w3c.dom.Element step = (org.w3c.dom.Element) steps.item(i);
            NodeList actions = step.getElementsByTagName("Action");

            for (int j = 0; j < actions.getLength(); j++) {
                org.w3c.dom.Element action = (org.w3c.dom.Element) actions.item(j);
                NodeList gelScripts = action.getElementsByTagName("gel:script");

                for (int k = 0; k < gelScripts.getLength(); k++) {
                    org.w3c.dom.Element gelScript = (org.w3c.dom.Element) gelScripts.item(k);
                    NodeList gelParameters = gelScript.getElementsByTagName("gel:parameter");

                    boolean hasVgDebugParameter = false;
                    boolean hasDefaultAttribute = false;

                    for (int l = 0; l < gelParameters.getLength(); l++) {
                        Node parameter = gelParameters.item(l);

                        if (parameter.getNodeType() == Node.ELEMENT_NODE) {
                            org.w3c.dom.Element elementNode = (org.w3c.dom.Element) parameter;

                            String varAttribute = elementNode.getAttribute("var");
                            String defaultAttribute = elementNode.getAttribute("default");

                            if ("vg_debug".equals(varAttribute)) {
                                hasVgDebugParameter = true;
                                if ("0".equals(defaultAttribute) || "1".equals(defaultAttribute)) {
                                    hasDefaultAttribute = true;
                                }
                                break;
                            }
                        }
                    }

                    if (!hasVgDebugParameter) {
                        errors.append("- <strong><font color='red'>ERROR</font></strong>");
                        errors.append(": Process script at Action '").append(action.getAttribute("code")).append("' in Step '").append(step.getAttribute("id")).append("' is missing the 'vg_debug' parameter<br>");
                    } else if (hasVgDebugParameter && !hasDefaultAttribute) {
                        errors.append("- <strong><font color='red'>ERROR</font></strong>");
                        errors.append(": Process script at Action '").append(action.getAttribute("code")).append("' in Step '").append(step.getAttribute("id")).append("' has an incorrect 'default' attribute in 'vg_debug' parameter<br>");
                    }
                }
            }
        }
    }

    // Checks if the process contains any direct URL
    public static void containsDirectURL() {
        boolean insideGelScript = false;
        int lineNumber = 0;

        Pattern urlPattern = Pattern.compile("https?://[^\s\"'>]+");

        try (BufferedReader reader = new BufferedReader(new FileReader(xmlFile))) {
            String line;

            while ((line = reader.readLine()) != null) {
                lineNumber++;

                if (line.contains("<gel:script")) {
                    insideGelScript = true;
                    continue;
                }

                if (line.contains("</gel:script>")) {
                    insideGelScript = false;
                    continue;
                }

                if (insideGelScript) {
                    Matcher matcher = urlPattern.matcher(line);
                    if (matcher.find() && !line.trim().startsWith("<!--")) {
                        errors.append("- <strong><font color='red'>ERROR</font></strong>: Found direct URL at line ")
                                .append(lineNumber)
                                .append("<br>");
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Validates that the process contains at least one intermediate step
    private void stepsValidation(org.w3c.dom.Element process) {
        NodeList steps = process.getElementsByTagName("Step");
        boolean hasIntermediateStep = false;

        if (steps.getLength() < 3) {
            errors.append("- <strong><font color='red'>ERROR</font></strong>");
            errors.append(": We need at least one intermediate step<br>");
            return;
        }

        for (int i = 0; i < steps.getLength(); i++) {
            org.w3c.dom.Element step = (org.w3c.dom.Element) steps.item(i);
            String stepId = step.getAttribute("id");
            if (!"Start".equals(stepId) && !"Finish".equals(stepId)) {
                hasIntermediateStep = true;
                break;
            }
        }

        if (!hasIntermediateStep) {
            errors.append("- <strong><font color='red'>ERROR</font></strong>");
            errors.append(": We need at least one intermediate step.<br>");
        }
    }

    // Validates that no XOG write operations are found in the process
    private void validateXogWrites(org.w3c.dom.Element process) {
        NodeList soapInvokes = process.getElementsByTagName("soap:invoke");

        for (int i = 0; i < soapInvokes.getLength(); i++) {
            org.w3c.dom.Element soapInvoke = (org.w3c.dom.Element) soapInvokes.item(i);
            String endpoint = soapInvoke.getAttribute("endpoint");

            if (endpoint != null && endpoint.contains("/niku/xog")) {
                List lineNumbers = getLineNumber("<" + soapInvoke.getNodeName());
                errors.append("- <strong><font color='orange'>WARNING</font></strong>");
                errors.append(": Found a XOG write operation at line ").append(lineNumbers.get(i)).append("<br>");
            }
        }
    }

    // Validates that no SQL update operations are found in the process
    private void validateSQLOperations(org.w3c.dom.Element process) {
        NodeList sqlUpdates = process.getElementsByTagName("sql:update");

        for (int i = 0; i < sqlUpdates.getLength(); i++) {
            org.w3c.dom.Element sqlUpdate = (org.w3c.dom.Element) sqlUpdates.item(i);
            List lineNumbers = getLineNumber("<" + sqlUpdate.getNodeName());
            errors.append("- <strong><font color='orange'>WARNING</font></strong>");
            errors.append(": Found a SQL operation at line ").append(lineNumbers.get(i)).append(" (UPDATE / DELETE / INSERT)<br>");
        }
    }

    // Updates the result summary
    private void validateResultSummary() {
        if (errors.toString().contains("ERROR")) {
            resultSummary.setText("<html>The process code is <b><span style='color: red;'>incorrect</span></b>.");
        } else if (errors.toString().contains("WARNING")) {
            resultSummary.setText("<html>The process code <b><span style='color: orange;'>may contain errors</span></b>.");
        } else {
            resultSummary.setText("<html>The process code is <b><span style='color: green;'>correct</span></b>.");
        }
    }

    // Increments the progress bar
    private void incrementProgress() {
        javax.swing.SwingUtilities.invokeLater(() -> progressBar.setValue(progressBar.getValue() + 9));
    }

    // Pauses the execution for the miliseconds specified
    private void waitingTime() {
        try {
            Thread.sleep(350);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    // Disables all user interface elements
    private void disableAll() {
        prefix.setEnabled(false);
        mandatoryYes.setEnabled(false);
        mandatoryNo.setEnabled(false);
        findXML.setEnabled(false);
        analyzeCodeBtn.setEnabled(false);
    }

    // Enables all user interface elements
    private void enableAll() {
        prefix.setEnabled(true);
        mandatoryYes.setEnabled(true);
        mandatoryNo.setEnabled(true);
        findXML.setEnabled(true);
        analyzeCodeBtn.setEnabled(true);
    }

    // Method that runs the validation checks 
    private String checks() {
        errors.append("<html><head><style>"
                + "body {"
                + "font-family: \"Segoe UI\", Arial, sans-serif;"
                + "font-style: normal;"
                + "font-weight: 400;"
                + "}"
                + "</style></head><body>");
        Thread validationThread = new Thread(() -> {

            try {
                // OBTAINING THE PROCESS
                org.w3c.dom.Element process = (org.w3c.dom.Element) validateSingleProcess();

                // ERROR CHECKING
                // 1-- Mandatory check and prefix checks
                validatePrefix(process);
                waitingTime();
                incrementProgress();

                // 2-- Languages validation
                validateDescriptionLanguages(process);
                waitingTime();
                incrementProgress();

                // 3-- Mandatory check and department validation
                validateMandatory(process);
                waitingTime();
                incrementProgress();

                // 4-- Avoid missed steps
                avoidMissedSteps(process);
                waitingTime();
                incrementProgress();

                // 5-- Global Variables
                validateGlobalVariables(process);
                waitingTime();
                incrementProgress();

                // 6-- Validate process header
                validateProcessHeader(process);
                waitingTime();
                incrementProgress();

                // 7-- Validate comments
                validateComments(process);
                waitingTime();
                incrementProgress();

                // 8-- Validate vg_debug parameter
                validateVgDebugParameter(process);
                waitingTime();
                incrementProgress();

                // 9-- Validate direct URL's
                containsDirectURL();
                waitingTime();
                incrementProgress();

                // 10-- validate steps
                stepsValidation(process);
                waitingTime();
                incrementProgress();

                // 11-- Validate no XOG writes
                validateXogWrites(process);
                waitingTime();
                incrementProgress();

                // 12-- Validate SQL operations (INSERT, UPDATE, DELETE)
                validateSQLOperations(process);
                waitingTime();
                incrementProgress();

                validateResultSummary();
                errors.append("</body></html>");
                SwingUtilities.invokeLater(() -> validationResult.setText(errors.toString()));
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                SwingUtilities.invokeLater(this::enableAll);
            }
        });
        
        validationThread.start();

        return "Validation in progress...";
    }
}
