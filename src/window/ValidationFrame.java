package window;

import java.awt.Color;
import java.io.File;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author dingeta.navarro
 */
public class ValidationFrame extends javax.swing.JFrame {

    public static class MandatoryException extends Exception {

        public MandatoryException(String message) {
            super(message);
        }
    }

    /**
     * Creates new form ValidationFrame
     */
    public ValidationFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("/images/tricise_logo.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mandatory = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        analyzeCodeBtn = new javax.swing.JButton();
        mandatoryNo = new javax.swing.JRadioButton();
        mandatoryYes = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        prefix = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        route = new javax.swing.JTextField();
        resultSummary = new javax.swing.JLabel("<html>The process code is <span style='color: green;'>correct</span>. | The process code is <span style='color: red;'>incorrect</span>. | The process code <span style='color: orange;'>may contain errors</span>.</html>")
        ;
        jScrollPane1 = new javax.swing.JScrollPane();
        validationResult = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tricise - Process code validator");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Validation result:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Validation result summary:");

        analyzeCodeBtn.setBackground(new java.awt.Color(204, 0, 0));
        analyzeCodeBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        analyzeCodeBtn.setForeground(new java.awt.Color(255, 255, 255));
        analyzeCodeBtn.setText("Analyze Code");
        analyzeCodeBtn.setEnabled(false);
        analyzeCodeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeCodeBtnActionPerformed(evt);
            }
        });

        mandatory.add(mandatoryNo);
        mandatoryNo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mandatoryNo.setText("<html>\n<b>No</b>\n</html>");
        mandatoryNo.setActionCommand("No");

        mandatory.add(mandatoryYes);
        mandatoryYes.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mandatoryYes.setSelected(true);
        mandatoryYes.setText("<html> <b>Yes</b> </html>");
        mandatoryYes.setActionCommand("Yes");
        mandatoryYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mandatoryYesActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Process file:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Mandatory name department identification?");

        prefix.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        prefix.setForeground(new java.awt.Color(153, 153, 153));
        prefix.setText("Example: c_");
        prefix.setToolTipText("");
        prefix.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                prefixFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                prefixFocusLost(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Insert preefix client/department:");

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Tricise-Process code validator");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jLabel1.setName(""); // NOI18N
        jLabel1.setOpaque(true);

        jButton2.setBackground(new java.awt.Color(204, 204, 204));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Carpeta_prueba.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        route.setEditable(false);
        route.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        route.setForeground(new java.awt.Color(153, 153, 153));
        route.setText("Load XML file (max. 5 MB)...");
        route.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routeActionPerformed(evt);
            }
        });
        route.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                routeKeyReleased(evt);
            }
        });

        resultSummary.setBackground(new java.awt.Color(255, 255, 255));
        resultSummary.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        resultSummary.setForeground(new java.awt.Color(153, 153, 153));
        resultSummary.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        resultSummary.setOpaque(true);

        validationResult.setEditable(false);
        validationResult.setColumns(20);
        validationResult.setRows(3);
        jScrollPane1.setViewportView(validationResult);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prefix, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(mandatoryYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mandatoryNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(route, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(analyzeCodeBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultSummary, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(37, 37, 37))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(prefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mandatoryYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mandatoryNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(route, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(analyzeCodeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 586, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void routeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_routeKeyReleased

    }//GEN-LAST:event_routeKeyReleased

    private void routeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_routeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de XML", "xml");
        fc.setFileFilter(filter);

        int res = fc.showOpenDialog(this);
        if (res != JFileChooser.CANCEL_OPTION) {
            File name = fc.getSelectedFile();
            if ((name == null) || name.getName().equals("")) {
                JOptionPane.showMessageDialog(this, "Error al abrir el archivo");
            } else {
                route.setText(name.getAbsolutePath());
            }
        }

        String file = route.getText();
        File xmlFile = new File(file);

        try {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbf.newDocumentBuilder();
            doc = dBuilder.parse(xmlFile);
            doc.getDocumentElement().normalize();

        } catch (IOException | ParserConfigurationException | SAXException e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error: " + e.getMessage());
        }
        enableAnalyzeBtn();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void prefixFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_prefixFocusLost
        if (prefix.getText().equals("")) {
            prefix.setText("Example: c_");
            prefix.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_prefixFocusLost

    private void prefixFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_prefixFocusGained
        if (prefix.getText().equals("Example: c_")) {
            prefix.setText("");
            prefix.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_prefixFocusGained

    private void mandatoryYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mandatoryYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mandatoryYesActionPerformed

    private void analyzeCodeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeCodeBtnActionPerformed

        validationResult.setText(checks());

    }//GEN-LAST:event_analyzeCodeBtnActionPerformed
    public void enableAnalyzeBtn() {
        if (route.getText().trim().equals("Load XML file (max. 5 MB)...")) {
            analyzeCodeBtn.setEnabled(false);
        } else {
            analyzeCodeBtn.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ValidationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ValidationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ValidationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ValidationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ValidationFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeCodeBtn;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup mandatory;
    private javax.swing.JRadioButton mandatoryNo;
    private javax.swing.JRadioButton mandatoryYes;
    private javax.swing.JTextField prefix;
    private javax.swing.JLabel resultSummary;
    private javax.swing.JTextField route;
    private javax.swing.JTextArea validationResult;
    // End of variables declaration//GEN-END:variables

    public static Document doc;

    public static StringBuilder errors = new StringBuilder();

    public enum NodeType {
        PROCESS("Process"),
        STEP("Step"),
        ACTION("Action");

        private final String nodeName;

        NodeType(String nodeName) {
            this.nodeName = nodeName;
        }

        public String getNodeName() {
            return nodeName;
        }
    }

    private org.w3c.dom.Element validateSingleProcess() {
        NodeList processes = doc.getElementsByTagName("Process");
        if (processes.getLength() != 1) {
            errors.append("- There is more than one process in the script");
            return null;
        } else {
            return (org.w3c.dom.Element) processes.item(0);
        }

    }

    private void validateMandatory(org.w3c.dom.Element process) throws MandatoryException {
        if (mandatory.isSelected(mandatoryYes.getModel())) {
            if (!prefix.getText().trim().equals("Example: c_")) {
                validatePrefix(process);
            } else {
                JOptionPane.showMessageDialog(null, "Please insert a prefix if you choose \"Yes\" on the mandatory question.");
                throw new MandatoryException("No prefix insertion but choosed \"Yes\" on the mandatory question.");
            }
        }
    }

    private void validatePrefix(org.w3c.dom.Element process) {
        NodeList steps = process.getElementsByTagName("Step");
        NodeList actions = process.getElementsByTagName("Action");
        String prefixUser = prefix.getText();

        if (!process.getAttribute("code").startsWith(prefixUser)) {
            errors.append("- The process ").append(process.getAttribute("code")).append(" does not have the prefix \"").append(prefixUser).append("\"\n");
        }

        for (int i = 0; i < steps.getLength(); i++) {
            org.w3c.dom.Element step = (org.w3c.dom.Element) steps.item(i);
            String stepId = step.getAttribute("id");

            if (!stepId.equals("Start") && !stepId.equals("Finish")) {
                if (!stepId.startsWith(prefixUser)) {
                    errors.append("- The step ").append(step.getAttribute("id")).append("\" does not have the prefix \"").append(prefixUser).append("\"\n");
                }
            }
        }

        for (int i = 0; i < actions.getLength(); i++) {
            org.w3c.dom.Element action = (org.w3c.dom.Element) actions.item(i);

            if (!action.getAttribute("code").startsWith(prefixUser)) {
                errors.append("- The action ").append(action.getAttribute("code")).append("\" does not have the prefix \"").append(prefixUser).append("\"\n");
            }
        }
    }

    private void validateDescriptionLanguages(org.w3c.dom.Element process) {
        String[] languages = {"ca", "cs", "da", "de", "en", "es", "fi", "fr", "hu", "it", "ja", "ko", "nl", "no",
            "pl", "pt", "ru", "sv", "tr", "zh", "zh_TW"};
        HashSet<String> languagesSet = new HashSet<>(Arrays.asList(languages));
        NodeList childNodes = doc.getElementsByTagName("nls");
        HashSet<String> foundLanguagesSet = new HashSet<>();

        for (int i = 0; i < childNodes.getLength(); i++) {
            Node child = childNodes.item(i);
            if (child.getNodeName().equals("nls")) {
                org.w3c.dom.Element nlsElement = (org.w3c.dom.Element) child;
                String languageCode = nlsElement.getAttribute("languageCode");
                foundLanguagesSet.add(languageCode);
            }
        }
        if (!foundLanguagesSet.containsAll(languagesSet)) {
            errors.append("- The " + "type" + " \"" + "identifier" + "\" does not have a description in all languages");
        }
    }

    private String checks() {

        // OBTAINING THE PROCESS
        org.w3c.dom.Element process = (org.w3c.dom.Element) validateSingleProcess();

// ERROR CHECKING
        // 1-- Mandatory check and prefix checks
        try {
            validateMandatory(process);
        } catch (MandatoryException e) {
            return "Execution stopped due to: " + e.getMessage();
        }
        if (errors.length() == 0) {
            errors.append("");
        }

        // 2-- lENGUAGES VALIDATION
        validateDescriptionLanguages(process);

        // 3--  Name of the process
        if (errors.toString().equals("")) {
            resultSummary.setText("<html>The process code is <b><span style='color: green;'>correct</span></b>.");
        }
        return (String) errors.toString();
    }
}
